// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using IceShopDB;

namespace IceShopDB.Migrations
{
    [DbContext(typeof(IceShopContext))]
    [Migration("20201102040452_Migration2")]
    partial class Migration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IceShopDB.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "Nick's house",
                            Email = "nevanwest@west.com",
                            Name = "Nick West",
                            Password = "nevaniscool"
                        },
                        new
                        {
                            Id = -2,
                            Address = "Vin's house",
                            Email = "vincent.weis@revature.com",
                            Name = "Vincent Wees",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.InventoryLineItem", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductQuantity")
                        .HasColumnName("ProductQuantity")
                        .HasColumnType("integer");

                    b.HasKey("LocationId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryLineItems");

                    b.HasData(
                        new
                        {
                            LocationId = -1,
                            ProductId = 1,
                            ProductQuantity = 5
                        },
                        new
                        {
                            LocationId = -1,
                            ProductId = 3,
                            ProductQuantity = 2
                        },
                        new
                        {
                            LocationId = -2,
                            ProductId = 2,
                            ProductQuantity = 3
                        },
                        new
                        {
                            LocationId = -2,
                            ProductId = 3,
                            ProductQuantity = 1
                        },
                        new
                        {
                            LocationId = -3,
                            ProductId = 1,
                            ProductQuantity = 12
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "Earth's core, presumably.",
                            Name = "Hell"
                        },
                        new
                        {
                            Id = -2,
                            Address = "In a laundry hamper",
                            Name = "Dirty Sock"
                        },
                        new
                        {
                            Id = -3,
                            Address = "1 E Washington St., #230, Phoenix, AZ 85004",
                            Name = "Phoenix"
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = -11,
                            Email = "reallycool@email.com",
                            LocationId = -1,
                            Name = "Tubular Tom",
                            Password = "IJustLikeTubes1"
                        },
                        new
                        {
                            Id = -12,
                            Email = "sample@manager.com",
                            LocationId = -2,
                            Name = "Vincent Weis",
                            Password = "bestmanager"
                        },
                        new
                        {
                            Id = -13,
                            Email = "spiderthing@lake.net",
                            LocationId = -3,
                            Name = "Vacuous Rom",
                            Password = "IAmASpider3"
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<double>("Subtotal")
                        .HasColumnName("Subtotal")
                        .HasColumnType("double precision");

                    b.Property<double>("TimeOrderWasFulfilled")
                        .HasColumnName("finishedtime_posix")
                        .HasColumnType("double precision");

                    b.Property<double>("TimeOrderWasPlaced")
                        .HasColumnName("placedtime_posix")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "Nick's house",
                            CustomerId = -1,
                            LocationId = -1,
                            Subtotal = 23.0,
                            TimeOrderWasFulfilled = 0.0,
                            TimeOrderWasPlaced = 1603522800.0
                        },
                        new
                        {
                            Id = -2,
                            Address = "Vin's house",
                            CustomerId = -2,
                            LocationId = -2,
                            Subtotal = 18.0,
                            TimeOrderWasFulfilled = 0.0,
                            TimeOrderWasPlaced = 1603954800.0
                        },
                        new
                        {
                            Id = -3,
                            Address = "Nick's house",
                            CustomerId = -1,
                            LocationId = -2,
                            Subtotal = 7.0,
                            TimeOrderWasFulfilled = 0.0,
                            TimeOrderWasPlaced = 1602572400.0
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.OrderLineItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductQuantity")
                        .HasColumnName("product_quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLineItems");

                    b.HasData(
                        new
                        {
                            OrderId = -1,
                            ProductId = 1,
                            ProductQuantity = 1
                        },
                        new
                        {
                            OrderId = -1,
                            ProductId = 2,
                            ProductQuantity = 2
                        },
                        new
                        {
                            OrderId = -2,
                            ProductId = 3,
                            ProductQuantity = 3
                        },
                        new
                        {
                            OrderId = -2,
                            ProductId = 2,
                            ProductQuantity = 1
                        },
                        new
                        {
                            OrderId = -3,
                            ProductId = 2,
                            ProductQuantity = 6
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("TypeOfProduct")
                        .HasColumnName("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The sensation of being on fire, usually caused by being on fire.",
                            Name = "Burning",
                            Price = 20.0,
                            TypeOfProduct = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "They're really cute, actually, if your brain is messed up.",
                            Name = "Sad Puppy Picture",
                            Price = 8.0,
                            TypeOfProduct = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Become Spiders-Man, and become a hive mind of spiders.",
                            Name = "Spider Infestation",
                            Price = 12.0,
                            TypeOfProduct = 3
                        });
                });

            modelBuilder.Entity("IceShopDB.Models.InventoryLineItem", b =>
                {
                    b.HasOne("IceShopDB.Models.Location", "Location")
                        .WithMany("InventoryLineItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceShopDB.Models.Product", "Product")
                        .WithMany("LocationsWithProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceShopDB.Models.Manager", b =>
                {
                    b.HasOne("IceShopDB.Models.Location", "Location")
                        .WithMany("Managers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceShopDB.Models.Order", b =>
                {
                    b.HasOne("IceShopDB.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceShopDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceShopDB.Models.OrderLineItem", b =>
                {
                    b.HasOne("IceShopDB.Models.Order", "Order")
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceShopDB.Models.Product", "Product")
                        .WithMany("OrdersWithProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
